import { useState } from "react";
import { Button, Card } from "./ui";

interface EmailResultsProps {
  networkData?: any;
  mediaData?: any;
  systemData?: any;
  quickTestData?: any;
}

interface EmailService {
  name: string;
  url: string;
  description: string;
}

export function EmailResults({ networkData, mediaData, systemData, quickTestData }: EmailResultsProps) {
  const [email, setEmail] = useState("");
  const [subject, setSubject] = useState("Network & Media Test Results");
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [emailSent, setEmailSent] = useState(false);
  const [error, setError] = useState("");

  const emailServices: EmailService[] = [
    {
      name: "EmailJS",
      url: "https://www.emailjs.com/",
      description: "Client-side email service with free tier"
    },
    {
      name: "Formspree",
      url: "https://formspree.io/",
      description: "Form handling service with email forwarding"
    },
    {
      name: "Netlify Forms",
      url: "https://docs.netlify.com/forms/setup/",
      description: "Built-in form handling for Netlify deployments"
    }
  ];

  const generateEmailContent = () => {
    const timestamp = new Date().toLocaleString();
    let content = `Network & Media Test Results\n`;
    content += `Generated on: ${timestamp}\n\n`;

    // Network Data
    if (networkData?.speedTest) {
      content += `=== NETWORK TEST RESULTS ===\n`;
      content += `Download Speed: ${networkData.speedTest.download} Mbps\n`;
      content += `Upload Speed: ${networkData.speedTest.upload} Mbps\n`;
      content += `Latency: ${networkData.speedTest.latency}ms\n`;
      content += `Jitter: ${networkData.speedTest.jitter}ms\n`;
      
      if (networkData.speedTest.connectionQuality) {
        content += `Connection Quality: ${networkData.speedTest.connectionQuality} (${networkData.speedTest.qualityScore}/100)\n`;
      }
      if (networkData.speedTest.bandwidthScore) {
        content += `Bandwidth Score: ${networkData.speedTest.bandwidthScore}/100\n`;
      }
      if (networkData.speedTest.packetLossRate !== undefined) {
        content += `Packet Loss Rate: ${networkData.speedTest.packetLossRate}%\n`;
      }
      if (networkData.speedTest.recommendations) {
        content += `\nRecommendations:\n`;
        networkData.speedTest.recommendations.forEach((rec: string, index: number) => {
          content += `${index + 1}. ${rec}\n`;
        });
      }
      content += `\n`;
    }

    // Ping Test Data
    if (networkData?.pingTest) {
      content += `=== PING TEST RESULTS ===\n`;
      content += `Host: ${networkData.pingTest.host}\n`;
      content += `Success Rate: ${networkData.pingTest.successRate}%\n`;
      content += `Average Time: ${networkData.pingTest.averageTime}ms\n`;
      content += `\n`;
    }

    // Traceroute Data
    if (networkData?.tracerouteTest) {
      content += `=== TRACEROUTE RESULTS ===\n`;
      content += `Host: ${networkData.tracerouteTest.host}\n`;
      content += `Total Hops: ${networkData.tracerouteTest.totalHops}\n`;
      content += `Successful Hops: ${networkData.tracerouteTest.successfulHops}\n`;
      content += `\n`;
    }

    // Media Data
    if (mediaData) {
      content += `=== MEDIA TEST RESULTS ===\n`;
      if (mediaData.devices) {
        content += `Microphone: ${mediaData.devices.microphone}\n`;
        content += `Camera: ${mediaData.devices.camera}\n`;
      }
      if (mediaData.permissions) {
        content += `Permissions: ${mediaData.permissions}\n`;
      }
      if (mediaData.micStats) {
        content += `Average Volume: ${mediaData.micStats.averageVolume}\n`;
        content += `Peak Volume: ${mediaData.micStats.peakVolume}\n`;
      }
      content += `\n`;
    }

    // System Data
    if (systemData) {
      content += `=== SYSTEM INFORMATION ===\n`;
      if (systemData.ipAddress) {
        content += `IP Address: ${systemData.ipAddress}\n`;
      }
      if (systemData.userAgent) {
        content += `User Agent: ${systemData.userAgent}\n`;
      }
      if (systemData.platform) {
        content += `Platform: ${systemData.platform}\n`;
      }
      if (systemData.screenResolution) {
        content += `Screen Resolution: ${systemData.screenResolution}\n`;
      }
      content += `\n`;
    }

    // Quick Test Data
    if (quickTestData) {
      content += `=== QUICK TEST SUMMARY ===\n`;
      content += `Overall Status: ${quickTestData.overallStatus}\n`;
      content += `Network Status: ${quickTestData.networkStatus}\n`;
      content += `Media Status: ${quickTestData.mediaStatus}\n`;
      content += `\n`;
    }

    content += `\n---\n`;
    content += `Generated by ipgrok Network & Media Tester\n`;
    content += `https://ipgrok.com\n`;

    return content;
  };

  const sendEmailViaEmailJS = async () => {
    setLoading(true);
    setError("");

    try {
      // This is a placeholder for EmailJS integration
      // In a real implementation, you would:
      // 1. Sign up for EmailJS (https://www.emailjs.com/)
      // 2. Configure your email template
      // 3. Use their JavaScript SDK
      
      const emailContent = generateEmailContent();
      
      // Simulate email sending (replace with actual EmailJS implementation)
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // For demonstration, we'll show success
      setEmailSent(true);
      setLoading(false);
      
      // In real implementation, you would use:
      // emailjs.send('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', {
      //   to_email: email,
      //   subject: subject,
      //   message: emailContent
      // });
      
    } catch (err) {
      setError("Failed to send email. Please try again.");
      setLoading(false);
    }
  };

  const sendEmailViaFormspree = async () => {
    setLoading(true);
    setError("");

    try {
      const emailContent = generateEmailContent();
      
      // Formspree integration
      const formData = new FormData();
      formData.append('email', email);
      formData.append('subject', subject);
      formData.append('message', emailContent);
      
      // Replace 'YOUR_FORMSPREE_ENDPOINT' with your actual Formspree endpoint
      const response = await fetch('https://formspree.io/f/YOUR_FORMSPREE_ENDPOINT', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        setEmailSent(true);
      } else {
        throw new Error('Failed to send email');
      }
    } catch (err) {
      setError("Failed to send email. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = async () => {
    try {
      const emailContent = generateEmailContent();
      await navigator.clipboard.writeText(emailContent);
      alert("Email content copied to clipboard!");
    } catch (err) {
      setError("Failed to copy to clipboard");
    }
  };

  const downloadEmailContent = () => {
    const emailContent = generateEmailContent();
    const blob = new Blob([emailContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `test_results_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const hasData = networkData || mediaData || systemData || quickTestData;

  if (!hasData) {
    return (
      <Card title="Email Results" subtitle="Send test results via email">
        <div className="text-center py-8">
          <p className="text-gray-600 dark:text-gray-400 mb-4">
            No test data available to send
          </p>
          <p className="text-sm text-gray-500 dark:text-gray-500">
            Run some tests first to generate results
          </p>
        </div>
      </Card>
    );
  }

  return (
    <Card title="Email Results" subtitle="Send test results via email">
      {emailSent ? (
        <div className="text-center py-8">
          <div className="text-green-600 dark:text-green-400 text-4xl mb-4">âœ“</div>
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
            Email Sent Successfully!
          </h3>
          <p className="text-gray-600 dark:text-gray-400 mb-4">
            Your test results have been sent to {email}
          </p>
          <Button
            onClick={() => {
              setEmailSent(false);
              setEmail("");
              setMessage("");
            }}
            variant="secondary"
          >
            Send Another Email
          </Button>
        </div>
      ) : (
        <div className="space-y-6">
          {/* Email Configuration */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Recipient Email
              </label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter recipient email address"
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Subject
              </label>
              <input
                type="text"
                value={subject}
                onChange={(e) => setSubject(e.target.value)}
                placeholder="Email subject"
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Additional Message (Optional)
              </label>
              <textarea
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Add any additional comments or context..."
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              />
            </div>
          </div>

          {/* Email Service Options */}
          <div>
            <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
              Email Service Options
            </h4>
            <div className="space-y-3">
              {emailServices.map((service) => (
                <div key={service.name} className="p-3 border border-gray-200 dark:border-gray-700 rounded-md">
                  <div className="flex items-center justify-between">
                    <div>
                      <h5 className="font-medium text-gray-900 dark:text-white">{service.name}</h5>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{service.description}</p>
                    </div>
                    <a
                      href={service.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 dark:text-blue-400 hover:underline text-sm"
                    >
                      Learn More
                    </a>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-3">
            <Button
              onClick={sendEmailViaEmailJS}
              loading={loading}
              disabled={!email}
              className="flex-1"
            >
              Send via EmailJS (Demo)
            </Button>
            
            <Button
              onClick={sendEmailViaFormspree}
              loading={loading}
              disabled={!email}
              variant="secondary"
              className="flex-1"
            >
              Send via Formspree
            </Button>
          </div>

          {/* Alternative Actions */}
          <div className="flex flex-col sm:flex-row gap-3">
            <Button
              onClick={copyToClipboard}
              variant="info"
              className="flex-1"
            >
              Copy to Clipboard
            </Button>
            
            <Button
              onClick={downloadEmailContent}
              variant="secondary"
              className="flex-1"
            >
              Download as Text
            </Button>
          </div>

          {/* Error Display */}
          {error && (
            <div className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md">
              <p className="text-red-800 dark:text-red-200 text-sm">{error}</p>
            </div>
          )}

          {/* Setup Instructions */}
          <div className="p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md">
            <h4 className="font-medium text-blue-900 dark:text-blue-100 mb-2">
              Setup Instructions
            </h4>
            <div className="text-sm text-blue-800 dark:text-blue-200 space-y-2">
              <p><strong>EmailJS:</strong> Sign up at emailjs.com, create a template, and replace the placeholder code with your service ID and template ID.</p>
              <p><strong>Formspree:</strong> Create a form at formspree.io and replace 'YOUR_FORMSPREE_ENDPOINT' with your actual endpoint.</p>
              <p><strong>Netlify Forms:</strong> Add form attributes to your HTML and deploy to Netlify for automatic form handling.</p>
            </div>
          </div>
        </div>
      )}
    </Card>
  );
} 