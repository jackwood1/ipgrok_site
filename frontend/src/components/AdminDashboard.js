import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { Card, Button, Badge } from './ui';
import { apiService } from '../services/api';
export function AdminDashboard({ onLogout }) {
    const [stats, setStats] = useState(null);
    const [recentTests, setRecentTests] = useState([]);
    const [performance, setPerformance] = useState(null);
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState('overview');
    const adminUser = localStorage.getItem('adminUser') || 'Admin';
    useEffect(() => {
        loadData();
    }, []);
    const loadData = async () => {
        setLoading(true);
        try {
            const [statsData, testsData, perfData] = await Promise.all([
                apiService.getTestStatistics(),
                apiService.getRecentTestResults(20),
                apiService.getPerformanceAnalytics({ limit: 100 })
            ]);
            setStats(statsData.stats);
            setRecentTests(testsData.results);
            setPerformance(perfData.data);
        }
        catch (error) {
            console.error('Failed to load admin data:', error);
        }
        finally {
            setLoading(false);
        }
    };
    const handleLogout = () => {
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminUser');
        onLogout();
    };
    const formatDate = (timestamp) => {
        return new Date(timestamp).toLocaleString();
    };
    const formatSpeed = (speed) => {
        const num = typeof speed === 'string' ? parseFloat(speed) : speed;
        return isNaN(num) ? 'N/A' : `${num.toFixed(2)} Mbps`;
    };
    if (loading) {
        return (_jsx("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center", children: _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4" }), _jsx("p", { className: "text-gray-600 dark:text-gray-400", children: "Loading admin dashboard..." })] }) }));
    }
    return (_jsxs("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900", children: [_jsx("header", { className: "bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-10", children: _jsx("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-2xl font-bold text-gray-900 dark:text-white", children: "\uD83D\uDCCA IPGrok Admin Dashboard" }), _jsxs("p", { className: "text-sm text-gray-600 dark:text-gray-400 mt-1", children: ["Welcome back, ", adminUser] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsx(Button, { onClick: loadData, variant: "secondary", size: "sm", children: "\uD83D\uDD04 Refresh" }), _jsx(Button, { onClick: handleLogout, variant: "danger", size: "sm", children: "Logout" })] })] }) }) }), _jsxs("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6", children: [_jsx("div", { className: "flex gap-4 mb-6 border-b border-gray-200 dark:border-gray-700", children: [
                            { id: 'overview', label: 'ðŸ“ˆ Overview', icon: 'ðŸ“ˆ' },
                            { id: 'tests', label: 'ðŸ§ª Recent Tests', icon: 'ðŸ§ª' },
                            { id: 'analytics', label: 'ðŸ“Š Analytics', icon: 'ðŸ“Š' }
                        ].map((tab) => (_jsx("button", { onClick: () => setActiveTab(tab.id), className: `px-4 py-2 font-medium transition-colors border-b-2 ${activeTab === tab.id
                                ? 'border-blue-600 text-blue-600 dark:text-blue-400'
                                : 'border-transparent text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200'}`, children: tab.label }, tab.id))) }), activeTab === 'overview' && stats && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6", children: [_jsxs(Card, { className: "bg-gradient-to-br from-blue-500 to-blue-600 text-white", children: [_jsx("h3", { className: "text-sm font-medium opacity-90", children: "Total Tests" }), _jsx("p", { className: "text-4xl font-bold mt-2", children: stats.totalTests || 0 })] }), _jsxs(Card, { className: "bg-gradient-to-br from-green-500 to-green-600 text-white", children: [_jsx("h3", { className: "text-sm font-medium opacity-90", children: "Avg Download" }), _jsx("p", { className: "text-4xl font-bold mt-2", children: stats.averageDownloadSpeed ? stats.averageDownloadSpeed.toFixed(0) : '0' }), _jsx("p", { className: "text-sm opacity-75", children: "Mbps" })] }), _jsxs(Card, { className: "bg-gradient-to-br from-purple-500 to-purple-600 text-white", children: [_jsx("h3", { className: "text-sm font-medium opacity-90", children: "Avg Upload" }), _jsx("p", { className: "text-4xl font-bold mt-2", children: stats.averageUploadSpeed ? stats.averageUploadSpeed.toFixed(0) : '0' }), _jsx("p", { className: "text-sm opacity-75", children: "Mbps" })] }), _jsxs(Card, { className: "bg-gradient-to-br from-orange-500 to-orange-600 text-white", children: [_jsx("h3", { className: "text-sm font-medium opacity-90", children: "Avg Latency" }), _jsx("p", { className: "text-4xl font-bold mt-2", children: stats.averageLatency ? stats.averageLatency.toFixed(0) : '0' }), _jsx("p", { className: "text-sm opacity-75", children: "ms" })] })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 dark:text-white mb-4", children: "Test Types Distribution" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: Object.entries(stats.testTypes || {}).map(([type, count]) => (_jsxs("div", { className: "p-4 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400 capitalize", children: type.replace(/([A-Z])/g, ' $1').trim() }), _jsx("p", { className: "text-2xl font-bold text-gray-900 dark:text-white mt-1", children: count })] }, type))) })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 dark:text-white mb-4", children: "Recent Activity (Last 7 Days)" }), _jsx("div", { className: "space-y-2", children: Object.entries(stats.recentActivity || {})
                                            .sort(([a], [b]) => b.localeCompare(a))
                                            .slice(0, 7)
                                            .map(([date, count]) => (_jsxs("div", { className: "flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [_jsx("span", { className: "text-gray-700 dark:text-gray-300", children: date }), _jsxs(Badge, { variant: "info", children: [count, " tests"] })] }, date))) })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 dark:text-white mb-4", children: "Top Locations (by IP)" }), _jsx("div", { className: "space-y-2", children: Object.entries(stats.topLocations || {})
                                            .slice(0, 10)
                                            .map(([ip, count]) => (_jsxs("div", { className: "flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [_jsx("span", { className: "text-gray-700 dark:text-gray-300 font-mono text-sm", children: ip }), _jsxs(Badge, { variant: "default", children: [count, " tests"] })] }, ip))) })] })] })), activeTab === 'tests' && (_jsx("div", { className: "space-y-4", children: _jsxs(Card, { children: [_jsxs("h2", { className: "text-xl font-bold text-gray-900 dark:text-white mb-4", children: ["Recent Test Results (", recentTests.length, ")"] }), _jsx("div", { className: "overflow-x-auto", children: _jsxs("table", { className: "w-full", children: [_jsx("thead", { children: _jsxs("tr", { className: "border-b border-gray-200 dark:border-gray-700", children: [_jsx("th", { className: "text-left py-3 px-4 text-gray-700 dark:text-gray-300", children: "Time" }), _jsx("th", { className: "text-left py-3 px-4 text-gray-700 dark:text-gray-300", children: "Type" }), _jsx("th", { className: "text-left py-3 px-4 text-gray-700 dark:text-gray-300", children: "Download" }), _jsx("th", { className: "text-left py-3 px-4 text-gray-700 dark:text-gray-300", children: "Upload" }), _jsx("th", { className: "text-left py-3 px-4 text-gray-700 dark:text-gray-300", children: "Latency" }), _jsx("th", { className: "text-left py-3 px-4 text-gray-700 dark:text-gray-300", children: "IP" })] }) }), _jsx("tbody", { children: recentTests.map((test, index) => {
                                                    const speedTest = test.networkData?.speedTest || {};
                                                    return (_jsxs("tr", { className: "border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700", children: [_jsx("td", { className: "py-3 px-4 text-sm text-gray-600 dark:text-gray-400", children: formatDate(test.timestamp) }), _jsx("td", { className: "py-3 px-4", children: _jsx(Badge, { variant: test.testType === 'quickTest' ? 'info' : 'default', children: test.testType }) }), _jsx("td", { className: "py-3 px-4 text-sm text-gray-900 dark:text-white font-medium", children: formatSpeed(speedTest.download) }), _jsx("td", { className: "py-3 px-4 text-sm text-gray-900 dark:text-white font-medium", children: formatSpeed(speedTest.upload) }), _jsxs("td", { className: "py-3 px-4 text-sm text-gray-900 dark:text-white", children: [speedTest.latency || 'N/A', " ms"] }), _jsx("td", { className: "py-3 px-4 text-sm text-gray-600 dark:text-gray-400 font-mono", children: test.ipAddress || 'N/A' })] }, test.testId || index));
                                                }) })] }) })] }) })), activeTab === 'analytics' && performance && (_jsxs("div", { className: "space-y-6", children: [_jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 dark:text-white mb-4", children: "Performance Analytics" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-2", children: [_jsx("h3", { className: "font-medium text-gray-700 dark:text-gray-300", children: "Download Speeds" }), _jsxs("div", { className: "p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg", children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Average" }), _jsxs("p", { className: "text-2xl font-bold text-blue-600 dark:text-blue-400", children: [performance.summary?.averageDownloadSpeed || 0, " Mbps"] })] }), _jsxs("div", { className: "p-4 bg-green-50 dark:bg-green-900/20 rounded-lg", children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Best" }), _jsxs("p", { className: "text-2xl font-bold text-green-600 dark:text-green-400", children: [performance.summary?.bestDownloadSpeed || 0, " Mbps"] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("h3", { className: "font-medium text-gray-700 dark:text-gray-300", children: "Upload Speeds" }), _jsxs("div", { className: "p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg", children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Average" }), _jsxs("p", { className: "text-2xl font-bold text-purple-600 dark:text-purple-400", children: [performance.summary?.averageUploadSpeed || 0, " Mbps"] })] }), _jsxs("div", { className: "p-4 bg-pink-50 dark:bg-pink-900/20 rounded-lg", children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Best" }), _jsxs("p", { className: "text-2xl font-bold text-pink-600 dark:text-pink-400", children: [performance.summary?.bestUploadSpeed || 0, " Mbps"] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("h3", { className: "font-medium text-gray-700 dark:text-gray-300", children: "Latency" }), _jsxs("div", { className: "p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg", children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Average" }), _jsxs("p", { className: "text-2xl font-bold text-orange-600 dark:text-orange-400", children: [performance.summary?.averageLatency || 0, " ms"] })] }), _jsxs("div", { className: "p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg", children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Lowest" }), _jsx("p", { className: "text-2xl font-bold text-yellow-600 dark:text-yellow-400", children: performance.summary?.lowestLatency === Infinity ? 'N/A' : `${performance.summary?.lowestLatency || 0} ms` })] })] })] })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 dark:text-white mb-4", children: "Connection Quality Distribution" }), _jsx("div", { className: "grid grid-cols-2 md:grid-cols-5 gap-4", children: Object.entries(performance.connectionQualities || {}).map(([quality, count]) => (_jsxs("div", { className: "p-4 text-center bg-gray-50 dark:bg-gray-700 rounded-lg", children: [_jsx("p", { className: "text-3xl font-bold text-gray-900 dark:text-white", children: quality }), _jsxs("p", { className: "text-sm text-gray-600 dark:text-gray-400 mt-1", children: [count, " tests"] })] }, quality))) })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 dark:text-white mb-4", children: "Tests Over Time" }), _jsx("div", { className: "space-y-2", children: Object.entries(performance.timeSeriesData || {})
                                            .sort(([a], [b]) => b.localeCompare(a))
                                            .slice(0, 14)
                                            .map(([date, data]) => (_jsxs("div", { className: "flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [_jsx("span", { className: "text-gray-700 dark:text-gray-300", children: date }), _jsxs("span", { className: "text-sm text-gray-600 dark:text-gray-400", children: [data.tests, " tests"] })] }, date))) })] })] }))] })] }));
}
